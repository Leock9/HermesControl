volumes:
  postgres_data:

services:
  hermescontrol.api:
    image: ${DOCKER_REGISTRY-}hermescontrolapi
    build:
      context: .
      dockerfile: src/HermesControl.Api/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - pgdb
      - pgadmin
      - rabbitmq

  hermescontrol.consumer:
    image: ${DOCKER_REGISTRY-}hermescontrolconsumer
    build:
      context: .
      dockerfile: src/HermesControl.Consumer/Dockerfile
    depends_on:
      - pgdb
      - rabbitmq 

  hermescontrol.orchestrator:
    image: ${DOCKER_REGISTRY-}hermescontrolorchestrator
    build:
      context: .
      dockerfile: src/HermesControl.Orchestrator/Dockerfile
    depends_on:
      - rabbitmq 

  pgdb:
    image: postgres:latest
    environment:
      POSTGRES_DB: dbHermesControl
      POSTGRES_USER: pass
      POSTGRES_PASSWORD: pass45455627
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pass -d dbHermesControl"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "leonardock9@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "pass"
    ports:
      - "5050:80"
    depends_on:
      - pgdb
    volumes:
    - "./servers.json:/pgadmin4/servers.json"

  zap:
    image: zaproxy/zap-stable
    command: >
      zap-api-scan.py -t http://hermescontrol.api:8080/order -f openapi -r api-scan-report.html
    ports:
      - "8090:8090"
    volumes:
      - ./reports:/zap/wrk
    depends_on:
      - hermescontrol.api

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"  # Porta para AMQP
      - "15672:15672"  # Porta para o painel de controle do RabbitMQ (opcional, para acesso ao RabbitMQ Management)
    environment:
      RABBITMQ_DEFAULT_USER: "guest"  
      RABBITMQ_DEFAULT_PASS: "guest"  
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
